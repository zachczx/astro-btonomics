---
import Layout from '../../layouts/Layout.astro'
import FormattedDate from '../../components/FormattedDate.astro'
import { getCollection, render } from 'astro:content'
import Prose from '../../components/Prose.astro'

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
    const blogEntries = await getCollection('blog')
    return blogEntries.map((entry) => ({
        params: {
            category: entry.data.category.toLowerCase().replace(' ', '-'),
            id: entry.data.slug,
        },
        props: { entry },
    }))
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props
const { Content } = await render(entry)
---

<Layout title={entry.data.title}>
    <div class="mb-14 lg:max-w-[1024px]">
        <h1 class="text-6xl font-bold">{entry.data.title}</h1>
        <div class="text-base-content/60 mt-4"><FormattedDate date={entry.data.pubDate} /></div>
        <div class="text-base-content/60">
            <div class="text-base-content/60 group-hover:text-base-100 mt-2 text-sm">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="1.3em"
                    height="1.3em"
                    class="prime:tags me-1 inline"
                    viewBox="0 0 24 24"
                >
                    <path
                        fill="currentColor"
                        d="m21.07 10.3l-6-6a.75.75 0 0 0-.53-.22H3c-.41 0-.75.34-.75.75v7.88c0 .2.08.39.22.53l6 5.99a2.3 2.3 0 0 0 1.64.68c.62 0 1.21-.24 1.64-.68l.22-.22c.04.08.08.16.15.22a2.326 2.326 0 0 0 3.29 0l5.65-5.65c.9-.9.9-2.37 0-3.28ZM10.7 18.17c-.16.16-.36.24-.58.24s-.43-.09-.58-.24L3.75 12.4V5.58h6.82l5.78 5.78c.32.32.32.84 0 1.16zm9.31-5.65l-5.65 5.65c-.32.32-.85.32-1.17 0a.7.7 0 0 0-.23-.15l4.44-4.44c.9-.91.9-2.38 0-3.28l-4.72-4.72h1.54L20 11.36c.32.32.32.84 0 1.16ZM8.25 8.5a1.25 1.25 0 1 1-2.5 0a1.25 1.25 0 0 1 2.5 0"
                    ></path>
                </svg>
                {
                    entry.data.tags.map((tag, i) => (
                        <>
                            {tag}
                            {entry.data.tags.length - 1 !== i ? ', ' : undefined}
                        </>
                    ))
                }
            </div>
        </div>
    </div>
    <Prose>
        <Content />
    </Prose>
</Layout>
